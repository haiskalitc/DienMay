<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:DienMay">
    <!--Bo tròn richtextbox-->
    <Style TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="roboto/#Roboto"></Setter>
    </Style >
    <Style TargetType="{x:Type UserControl}">
        <Setter Property="FontFamily" Value="roboto/#Roboto"></Setter>
    </Style >
    <Style x:Key="{x:Type TextBoxBase}" BasedOn="{x:Null}" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"  SnapsToDevicePixels="true" CornerRadius="20" BorderThickness="9,6,10,7">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="TextDecorations" Value="Underline"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Red"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- <Style x:Key="Bo_RichTextbox" TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
            </Style>
            <Style x:Key="{x:Type Paragraph}" TargetType="{x:Type Paragraph}">
                <Setter Property="Margin" Value="0"/>
            </Style>
            <Style x:Key="{x:Type Image}" TargetType="{x:Type Image}">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Width" Value="NaN"/>
                <Setter Property="Height" Value="NaN"/>
            </Style>
            <Style x:Key="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="Blue"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth" Value="10"/>
        <Style.BasedOn>
            <StaticResource ResourceKey="{x:Type TextBoxBase}"/>
        </Style.BasedOn>
    </Style> -->
    <Style TargetType="PasswordBox" x:Key="Bo_Passwordbox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border CornerRadius="3" BorderBrush="#555555" BorderThickness="0.5" Height="{TemplateBinding Height}">
                        <ScrollViewer BorderThickness="0" Margin="2"
                                          Background="White"
                                     FontSize="13" 
                                      x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox" x:Key="Bo_Textbox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border CornerRadius="3" BorderBrush="#555555" BorderThickness="0.5" Height="{TemplateBinding Height}">
                        <ScrollViewer BorderThickness="0" Margin="2"
                                          Background="White"
                                     FontSize="13" 
                                      x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="RichTextBox" x:Key="Bo_RichTextbox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border  BorderBrush="#555555" BorderThickness="1.6,1.6,0.5,0.5">
                        <ScrollViewer  
                                          Background="White"
                                     FontSize="13" x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
                <Setter Property="FontWeight" Value="Normal"></Setter>
                <Setter Property="FontSize" Value="15"></Setter>
                <Setter Property="ToolTip" Value="Click 2 lần để mở rộng ô nhập"></Setter>
                <Setter Property="FontStretch" Value="Normal"></Setter>
                <Setter Property="FontSize" Value="17"></Setter>
                <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            </Style>
            <Style x:Key="{x:Type Paragraph}" TargetType="{x:Type Paragraph}">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="ToolTip" Value="Click 2 lần để mở rộng ô nhập"></Setter>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="FontStretch" Value="Normal"/>
            </Style>
            <Style x:Key="{x:Type Run}" TargetType="{x:Type Run}">
                <Setter Property="BaselineAlignment" Value="Center"/>
                <Setter Property="ToolTip" Value="Click 2 lần để mở rộng ô nhập"></Setter>
                <Setter Property="FontSize" Value="17"></Setter>
                <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            </Style>
            <Style x:Key="{x:Type Image}" TargetType="{x:Type Image}">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Width" Value="NaN"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="StretchDirection" Value="Both"></Setter>
                <Setter Property="Stretch" Value="Fill"></Setter>
                <Setter Property="ToolTip" Value="Click 2 lần để mở rộng ô nhập"></Setter>

            </Style>

        </Style.Resources>
    </Style>


    <Style x:Key="RichDapAn" TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
                <Setter Property="FontWeight" Value="Normal"></Setter>
                <Setter Property="FontSize" Value="15"></Setter>
                <Setter Property="ToolTip" Value="Click 2 lần để mở rộng ô nhập"></Setter>
            </Style>
            <Style x:Key="{x:Type Paragraph}" TargetType="{x:Type Paragraph}">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="ToolTip" Value="Click 2 lần để mở rộng ô nhập"></Setter>
            </Style>
            <Style x:Key="{x:Type Run}" TargetType="{x:Type Run}">
                <Setter Property="BaselineAlignment" Value="Center"/>
                <Setter Property="ToolTip" Value="Click 2 lần để mở rộng ô nhập"></Setter>
            </Style>
            <Style x:Key="{x:Type Image}" TargetType="{x:Type Image}">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Width" Value="NaN"/>
                <Setter Property="Height" Value="NaN"/>
                <Setter Property="ToolTip" Value="Click 2 lần để mở rộng ô nhập"></Setter>
            </Style>
            <Style x:Key="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="Blue"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth" 
                
                Value="10"/>
        <Setter Property="MaxHeight" 
                
                Value="40"/>

    </Style>
    <!--End Bo tròn richtextbox-->
    <!--Style cho giao dien dang nhap-->
    <Style TargetType="Border" x:Key="BorderTaiKhoan">
        <Setter Property="BorderBrush" Value="#eeeeee"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="CornerRadius" Value="4"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter   Property="BorderBrush" Value="#aaaaaa" ></Setter>
                <Setter   Property="BorderThickness" Value="1" ></Setter>
                <Setter   Property="CornerRadius" Value="5" ></Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
                <Setter   Property="BorderBrush" Value="#aaaaaa" ></Setter>
                <Setter   Property="BorderThickness" Value="1" ></Setter>
                <Setter   Property="CornerRadius" Value="5" ></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Border" x:Key="BorderMatKhau">
        <Setter Property="BorderBrush" Value="#eeeeee"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter   Property="BorderBrush" Value="#555555" ></Setter>
                <Setter   Property="BorderThickness" Value="1" ></Setter>
                <Setter   Property="CornerRadius" Value="5" ></Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
                <Setter   Property="BorderBrush" Value="#555555" ></Setter>
                <Setter   Property="BorderThickness" Value="1" ></Setter>
                <Setter   Property="CornerRadius" Value="5" ></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TextBox}" x:Key="textbox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Foreground" Value="#555555"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <!--<Border Name="shortcutbutton"  
                    BorderBrush="#eeeeee"
                    CornerRadius="5"
                    BorderThickness="4"
                    >-->
                    <ScrollViewer x:Name="PART_ContentHost" Margin="8 0 0 0" VerticalAlignment="Center"/>
                    <!--</Border>-->
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter  TargetName="textbox" Property="Text" Value="" ></Setter>
                        </Trigger>
                        <Trigger  Property="Focusable" Value="false">
                            <Setter TargetName="textbox"  Property="Text" Value="" ></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                         Value="False">
                            <Setter Property="Text" Value="" />
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type PasswordBox}" x:Key="passwordbox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <!--<Border Name="shortcutbutton"  
                    BorderBrush="#eeeeee"
                    BorderThickness="4"
                    CornerRadius="5"
                    >-->
                    <ScrollViewer x:Name="PART_ContentHost" Margin="8 0 0 0" VerticalAlignment="Center"/>
                    <!--</Border>-->
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            -->
                    <!--<Setter TargetName="Border" Property="Foreground" Value="white" />-->
                    <!--
                            <Setter  TargetName="shortcutbutton" Property="BorderBrush" Value="#555555" ></Setter>
                            <Setter  TargetName="shortcutbutton" Property="BorderThickness" Value="1" ></Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            -->
                    <!--<Setter TargetName="Border" Property="Foreground" Value="white" />-->
                    <!--
                            <Setter  TargetName="shortcutbutton" Property="BorderThickness" Value="1" ></Setter>
                            <Setter  TargetName="shortcutbutton" Property="BorderBrush" Value="#555555" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Style button dang nhap-->
    <Style TargetType="Button" x:Key="btnTim">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="shortcutbutton"  
                    BorderThickness="0"
                    BorderBrush="Black"
                            Background="#FF4189EB"
                            CornerRadius="5"
                    >
                        <ContentPresenter Margin="16 10 16 10" 
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center" 
                                  RecognizesAccessKey="True"
                                             />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="shortcutbutton" Property="Background" Value="#FF4189EB" />
                            <Setter TargetName="shortcutbutton" Property="BorderBrush" Value="white" />
                            <Setter  Property="BorderBrush" Value="#FF4189EB" ></Setter>
                            <!--<Setter TargetName="Border" Property="Foreground" Value="white" />-->
                            <Setter  Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="shortcutbutton" Property="Background" Value="#FF4189EB" />
                            <Setter TargetName="shortcutbutton" Property="BorderBrush" Value="Black" />
                            <Setter  Property="BorderBrush" Value="#FF4189EB" ></Setter>
                            <!--<Setter TargetName="Border" Property="Foreground" Value="Red" />-->
                            <Setter  Property="Foreground" Value="Red" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Style cho button -> menu trang chu-->
    <Style TargetType="Button" x:Key="btnMenu">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Foreground" Value="#014d71"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="shortcutbutton"  
                    BorderThickness="0"
                    BorderBrush="Transparent"
                     Background="{TemplateBinding Background}" 
                    >
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="0.1*"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                                <ColumnDefinition Width="10"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Border  Grid.Column="2" HorizontalAlignment="Right" Width="auto" Height="auto" VerticalAlignment="Center" >
                                <Image Source="Images/Icon_Arrow@1x.png" Visibility="Hidden" Name="SmallImage" Height="16"></Image>
                            </Border>
                            <StackPanel  Grid.Column="1" Orientation="Horizontal">
                                <Image Name="img" Source="{Binding Path=Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                               Height="24" Width="24" 
                                                       Margin="0 0 12 0"
                                                       VerticalAlignment="Center"
                                               ></Image>
                                <ContentPresenter Margin="2"  
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Center" 
                                  RecognizesAccessKey="True"
                                             >
                                </ContentPresenter>
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="shortcutbutton" Property="Background" Value="#99014d71" />
                            <Setter TargetName="shortcutbutton" Property="BorderBrush" Value="white" />
                            <Setter TargetName="img" Property="Source" Value="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"></Setter>
                            <Setter  Property="BorderBrush" Value="#FF4189EB" ></Setter>
                            <Setter Property="Visibility" TargetName="SmallImage" Value="Visible">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="shortcutbutton" Property="Background" Value="#014d71"></Setter>
                            <Setter TargetName="img" Property="Source" Value="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"></Setter>
                            <Setter Property="Visibility" TargetName="SmallImage" Value="Visible">
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="White"></Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
                <Setter  Property="Foreground" Value="White"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Listview Header-->
    <Style TargetType="GridViewColumnHeader" x:Key="listViewHeader">
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="Background" Value="#ecf6fd" />
        <Setter Property="BorderBrush" Value="#555555"></Setter>
        <Setter Property="BorderThickness" Value="0.5"></Setter>
        <Setter Property="Foreground" Value="#014d71"></Setter>
    </Style>
    <!--Test-->
    <Style TargetType="ContentControl" x:Key="ControlBorder">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Style="{StaticResource BorderKhoLuu}" Name="BorderNgoai">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="72"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0"
                  VerticalAlignment="Center">
                                <Image Name="image" Source="{Binding Path=ImagePath, RelativeSource={RelativeSource TemplatedParent}}"></Image>
                            </Grid>
                            <Grid Grid.Column="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="9*"></ColumnDefinition>
                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <StackPanel

                Grid.Column="0"
                Orientation="Vertical">
                                    <TextBlock Name="textblock"
                           Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}}"
                           Style="{StaticResource textblock}">
                                    </TextBlock>
                                    <TextBlock 
                                        Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}}"
                                        ></TextBlock>
                                </StackPanel>
                                <Grid Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <Image Source="{Binding Path=ImagePath, RelativeSource={RelativeSource TemplatedParent}}"></Image>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Test-->
    <!--Style border Kho Luu Tru Cau Hoi-->
    <Style TargetType="Border" x:Key="BorderKhoLuu">
        <Setter Property="BorderBrush" Value="#eeeeee"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="CornerRadius" Value="4"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter   Property="BorderBrush" Value="#aaaaaa" ></Setter>
                <Setter   Property="BorderThickness" Value="1" ></Setter>
                <Setter   Property="CornerRadius" Value="2" ></Setter>
                <Setter Property="Cursor" Value="Hand"></Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
                <Setter   Property="BorderBrush" Value="Red" ></Setter>
                <Setter   Property="BorderThickness" Value="1" ></Setter>
                <Setter   Property="CornerRadius" Value="2" ></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Style cho button Tro Ve-->
    <Style TargetType="Button" x:Key="btnTroVe">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="/Images/Btn_Back@1xx.png"></ImageBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="shortcutbutton"  
                            CornerRadius="5"
                            Width="80"
                            Height="32"
                            Background="{TemplateBinding Background}"
                    >
                        <ContentPresenter Margin="2" 
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center" 
                                  RecognizesAccessKey="True"
                                             />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="shortcutbutton" Property="BorderBrush" Value="white" />
                            <Setter  Property="BorderBrush" Value="#FF4189EB" ></Setter>
                            <!--<Setter TargetName="Border" Property="Foreground" Value="white" />-->
                            <Setter  Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="shortcutbutton" Property="BorderBrush" Value="Black" />
                            <Setter  Property="BorderBrush" Value="#FF4189EB" ></Setter>
                            <!--<Setter TargetName="Border" Property="Foreground" Value="Red" />-->
                            <Setter  Property="Foreground" Value="Red" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Style button Tim Kiem-->
    <Style TargetType="Button" x:Key="MyButton">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="shortcutbutton"  
                    BorderThickness="0"
                    BorderBrush="Black"
                            Background="{TemplateBinding Background}"
                            CornerRadius="3"
                    >
                        <ContentPresenter Margin="2" 
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center" 
                                  RecognizesAccessKey="True"
                                             />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="shortcutbutton" Property="Background" Value="#FF4189EB" />
                            <Setter TargetName="shortcutbutton" Property="BorderBrush" Value="Black" />
                            <Setter  Property="BorderBrush" Value="#FF4189EB" ></Setter>
                            <!--<Setter TargetName="Border" Property="Foreground" Value="Red" />-->
                            <Setter  Property="Foreground" Value="Red" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Style cho textblock-->
    <Style TargetType="TextBlock" x:Key="textblock">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="Auto"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#FF4189EB"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Style cho combobox-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="5"
                  Background="White"
                  BorderBrush="Gray"
                  BorderThickness="0.5" />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="#AAAAAA"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="black" />

            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="BorderThickness" Value="1 1 1 0" />
                <Setter TargetName="Border" Property="BorderBrush" Value="gray" />
                <Setter TargetName="Border" Property="CornerRadius" Value="5 5 0 0" />
            </Trigger>
            <Trigger Property="ToggleButton.IsPressed" Value="true">
                <Setter TargetName="Border" Property="CornerRadius" Value="5"></Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#F3F7FB" />
                <Setter TargetName="Border" Property="BorderBrush" Value="gray" />
                <Setter Property="Foreground" Value="#1c1c1c"/>
                <Setter TargetName="Arrow" Property="Fill" Value="black" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--ComboBoxToggleButton_KhongBo-->
    <ControlTemplate x:Key="ComboBoxToggleButton_KhongBo" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  Background="White"
                Margin="0 0 0.6 0"
                   />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="#AAAAAA"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="black" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#F3F7FB" />
                <!--<Setter TargetName="Border" Property="BorderBrush" Value="gray" />-->
                <Setter Property="Foreground" Value="#AAAAAA"/>
                <Setter TargetName="Arrow" Property="Fill" Value="black" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <!--combobox_khongbo-->
    <Style x:Key="combobox_khongbo" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>

        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background" Value="White"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton_KhongBo}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="10,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"/>
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="White"
                            Foreground="#555555"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                             
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="White"
                                BorderBrush="Black"
                                    BorderThickness="0.25 0 0 0.25"
                                 />
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#555555"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0 0 5 5"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <!--combobox2-->
    <Style x:Key="combobox2" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background" Value="White"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="10,3,10,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"/>
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="White"
                            Foreground="#555555"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                             
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="White"
                                BorderThickness="1 0 1 1"
                                BorderBrush="Gray"
                                 />
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#555555"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                            BorderBrush="#eeeeee"
                            BorderThickness="0 1 0 1"
                              SnapsToDevicePixels="true">
                        <ContentPresenter Margin="16 10 0 10"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#F3F7FB"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#4189EB"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="#4189EB"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListViewItem">
        <Setter Property="BorderBrush" Value="Black"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="Foreground" Value="Black"></Setter>
        <Setter Property="FontSize" Value="15"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border Background="{TemplateBinding Background}" 
                            Name="border"
                            BorderBrush="Black"
                            BorderThickness="0 0 0 0.5" >
                        <GridViewRowPresenter  HorizontalAlignment="Stretch"></GridViewRowPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#BEE6FD"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--DataGridColumn Header-->
    <Style TargetType="{x:Type DataGridColumnHeader}" x:Key="DataGridColumnHeader">
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="Background" Value="#ecf6fd" />
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="BorderBrush" Value="#555555"></Setter>
        <Setter Property="BorderThickness" Value="0 0 0.5 0"></Setter>
        <Setter Property="Foreground" Value="#014d71"></Setter>
    </Style>
    <!--Element Style-->
    <Style TargetType="TextBlock" x:Key="ElementStyle">
        <Setter Property="HorizontalAlignment" Value="Center" ></Setter>
        <Setter Property="VerticalAlignment" Value="Center" ></Setter>
        <Setter Property="Foreground" Value="#1c1c1c" ></Setter>
    </Style>
    <Style TargetType="DataGridCell">
        <Setter Property="BorderBrush" Value="#555555"></Setter>
        <Setter Property="BorderThickness" Value="0 0.5 0.5 0.025"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Padding" Value="0"></Setter>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="#ecf6fd"></Setter>
                <Setter Property="BorderThickness" Value="0 0.5 0.5 0.025"></Setter>
                <Setter Property="BorderBrush" Value="#555555"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type RadioButton}" x:Key="MyRadio">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <!--BulletDecorator is used to provide baseline alignment between the checkmark and the Content-->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="20" Height="20">
                                <Ellipse x:Name="Ellipse_Border"  Stroke="#a6a8ab" StrokeThickness="2" />
                                <Ellipse Margin="8" x:Name="CheckMark" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                            <Setter Property="Fill" Value="#f9f9f9" TargetName="Ellipse_Border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" Value="#00a551" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#00a551" TargetName="CheckMark"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckMark"/>
                            <Setter Property="Fill" Value="#f9f9f9" TargetName="Ellipse_Border"/>
                            <Setter Property="Stroke" Value="#00a551" TargetName="Ellipse_Border"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="Minimize">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border  Name="border" Background="Transparent" BorderBrush="Transparent">
                        <Image Source="Images/1.png" Name="img" ></Image>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="img" Property="Source" Value="Images/1_bg.png"></Setter>
                            <Setter TargetName="img" Property="Panel.ZIndex" Value="1"></Setter>
                            <Setter TargetName="border" Property="Background" Value="#014d71"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="CloseButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image Source="Images/3.png" Name="img" Stretch="Fill" ></Image>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="img" Property="Source" Value="Images/3_White.png"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="RadioButton" x:Key="CustomRadioDapAn">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <!--BulletDecorator is used to provide baseline alignment between the checkmark and the Content-->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="20" Height="20">
                                <Ellipse x:Name="Ellipse_Border"  Stroke="#aaaaaa" StrokeThickness="1" />
                                <Ellipse Margin="7" x:Name="CheckMark" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                            <Setter Property="Fill" Value="#f9f9f9" TargetName="Ellipse_Border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" Value="#1c1c1c" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#1c1c1c" TargetName="CheckMark"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#1c1c1c" TargetName="Ellipse_Border"/>

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="#1c1c1c"></Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
                <Setter Property="Foreground" Value="#1c1c1c"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="RadioButton" x:Key="CustomRadio1">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <!--BulletDecorator is used to provide baseline alignment between the checkmark and the Content-->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="20" Height="20">
                                <Ellipse x:Name="Ellipse_Border"  Stroke="#aaaaaa" StrokeThickness="1" />
                                <Ellipse Margin="7" x:Name="CheckMark" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                            <Setter Property="Fill" Value="#f9f9f9" TargetName="Ellipse_Border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" Value="#1c1c1c" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#1c1c1c" TargetName="CheckMark"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#014d71" TargetName="Ellipse_Border"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" Value="#014d71" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#014d71" TargetName="CheckMark"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#014d71" TargetName="Ellipse_Border"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#014d71"></Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="#014d71"></Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
                <Setter Property="Foreground" Value="#aaaaaa"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="RadioButton" x:Key="CustomRadio">
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Padding" Value="10 0 0 0"></Setter>
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="Width" Value="95"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <!--BulletDecorator is used to provide baseline alignment between the checkmark and the Content-->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="20" Height="20">
                                <Ellipse x:Name="Ellipse_Border"  Stroke="#aaaaaa" StrokeThickness="1" />
                                <Ellipse Margin="7" x:Name="CheckMark" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                      Margin="{TemplateBinding Padding}"
                                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                            <Setter Property="Fill" Value="#f9f9f9" TargetName="Ellipse_Border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" Value="#014d71" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#014d71" TargetName="CheckMark"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#014d71" TargetName="Ellipse_Border"/>

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#014d71" TargetName="Ellipse_Border"/>

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#014d71"></Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="#014d71"></Setter>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="false"></Condition>
                    <Condition Property="IsChecked" Value="false"></Condition>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Foreground" Value="#014d71"></Setter>
                </MultiTrigger.Setters>
            </MultiTrigger>

        </Style.Triggers>
    </Style>

    <Style TargetType="CheckBox" x:Key="CustomCheckbox">
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Padding" Value="10 0 0 0"></Setter>
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="Width" Value="95"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="20" Height="20" >
                                <Border x:Name="Ellipse_Border"  BorderBrush="#aaaaaa" BorderThickness="1" />
                                <Path Visibility="Collapsed"
                                                            Width="10"
                                                            Height="10"
                                                            x:Name="CheckMark"
                                                            SnapsToDevicePixels="False"
                                                            StrokeThickness="2"
                                                            Data="M 1 4.5 L 4 7.5 M 4 7.5 L 8 1">
                                    <Path.Stroke>
                                        <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                                    </Path.Stroke>
                                </Path>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                      Margin="{TemplateBinding Padding}"
                                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                            <Setter Property="Background" Value="#f9f9f9" TargetName="Ellipse_Border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" Value="#014d71" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="#014d71" TargetName="CheckMark"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckMark"></Setter>
                            <Setter Property="BorderBrush" Value="#014d71" TargetName="Ellipse_Border"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="#014d71"></Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
                <Setter Property="Foreground" Value="#1c1c1c"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ToggleButton" x:Key="CustomToggle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Name="border" BorderThickness="1" CornerRadius="5">
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="5*"></ColumnDefinition>
                                <ColumnDefinition></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <TextBlock Name="tbl" VerticalAlignment="Center" HorizontalAlignment="Center"></TextBlock>
                            <Border Grid.Column="1" Background="Transparent" BorderThickness="1" 
                                    BorderBrush="{Binding Path=Foreground, ElementName=tbl}" CornerRadius="2" Margin="1">
                                <Rectangle Name="HinhCN"></Rectangle>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" Value="#014d71" TargetName="border"></Setter>
                            <Setter Property="Fill" Value="#014d71" TargetName="HinhCN"></Setter>
                            <Setter Property="Text" Value="Đúng" TargetName="tbl"></Setter>
                            <Setter Property="Foreground" Value="#014d71" TargetName="tbl"></Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="BorderBrush" Value="red" TargetName="border"></Setter>
                            <Setter Property="Fill" Value="#c00319" TargetName="HinhCN"></Setter>
                            <Setter Property="Text" Value="Sai" TargetName="tbl"></Setter>
                            <Setter Property="Foreground" Value="#c00319" TargetName="tbl"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Border" x:Key="BoTron_Border">
        <Setter Property="CornerRadius" Value="5"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="#555555"></Setter>
        <Setter Property="BorderThickness" Value="0.5"></Setter>
    </Style>
    <Style TargetType="ToggleButton" x:Key="CustomNutGhim">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Image Name="img" Source="Images/Pin_Gray.png"></Image>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="img" Property="Source" Value="Images/Pin_Green.png"></Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="false">
                            <Setter TargetName="img" Property="Source" Value="Images/Pin_Gray.png"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="img" Property="Source" Value="Images/Pin_Gray_Hover.png"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"></Condition>
                                <Condition Property="ToggleButton.IsChecked" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="img" Property="Source" Value="Images/Pin_Green_Hover.png"></Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="DienKhuyet">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border">
                        <Image Name="img" Source="Images/(1).png" Margin="7"></Image>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Source" TargetName="img" Value="Images/(1).png">
                            </Setter>
                            <Setter TargetName="border" Property="Background" Value="#ecb4ba"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="DienKhuyet2">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border">
                        <Image Name="img" Source="Images/(1)_Gray.png" Margin="7"></Image>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Source" TargetName="img" Value="Images/(1).png">
                            </Setter>
                            <Setter TargetName="border" Property="Background" Value="#ecb4ba"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ToggleButton" x:Key="Toolbox_ToggleButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#ecb4ba"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="Toolbox_Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#ecb4ba"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ToolTip" x:Key="CustomToolTip">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Style="{DynamicResource BoTron_Border}" 
                            Background="White"
                            BorderBrush="#aaaaaa"
                            BorderThickness="1"
                            Width="230"
                            Height="100">
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="2*"></RowDefinition>
                                <RowDefinition Height="4*"></RowDefinition>
                                <RowDefinition Height="2*"></RowDefinition>
                            </Grid.RowDefinitions>
                            <TextBlock Text="Trộn câu trả lời" 
                                       Foreground="#014d71"
                                       FontWeight="Bold"
                                       Margin="10 10 10 0"
                                       FontSize="11"></TextBlock>
                            <StackPanel Grid.Row="1" Margin="10 10 10 0">
                                <TextBlock  Text="Mặc định câu trả lời sẽ được trộn khi xuất ra đề thi"
                                        Foreground="Black"
                                         FontWeight="DemiBold"
                                       FontSize="9"></TextBlock>
                                <TextBlock FontSize="9"
                                            Foreground="Black"
                                    Text="Chọn để giữ vị trí câu trả lời khi xuất đề thi"
                                            FontWeight="DemiBold"></TextBlock>
                            </StackPanel>
                            <Border Grid.Row="1" BorderBrush="#eeeeee" BorderThickness="1" VerticalAlignment="Bottom" Margin="0 10 0 0"></Border>
                            <StackPanel Orientation="Horizontal" Grid.Row="2" Margin="10 0">
                                <Image Source="Images/Question.png" Width="10" Height="10" Margin="0 0 2 0"></Image>
                                <TextBlock  Text="Nhấn F1 để xem hướng dẫn chi tiết"
                                        FontWeight="DemiBold"
                                       VerticalAlignment="Center"
                                             Foreground="#aaaaaa"
                                       FontSize="9"></TextBlock>
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="CusTom_ButtonXoa">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Width" Value="30"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image Source="/Images/Icon_Cancel@2x.png" Name="img"></Image>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="img" Property="Source" Value="Images/Icon_Cancel_Hover@2x.png"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="DatePickerTextBox">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>

                    <TextBox x:Name="PART_TextBox"
                             BorderBrush="Transparent"
                             FontSize="14"
                                 IsEnabled="False"
                             BorderThickness="0"
                             Background="Transparent"
                             SelectedText="Chọn ngày thi"
            Text="{Binding Path=SelectedDate, StringFormat='dd/MM/yyyy', 
            RelativeSource={RelativeSource AncestorType={x:Type DatePicker}}}" >
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>